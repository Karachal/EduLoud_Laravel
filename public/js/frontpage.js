/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/frontpage.js":
/*!***********************************!*\
  !*** ./resources/js/frontpage.js ***!
  \***********************************/
/***/ (() => {

eval("jQuery(document).ready(function () {\n  var responseChart; // Declare chart globally\n\n  restoreSuggestions();\n\n  // Toggle form visibility\n  jQuery('#toggleFormBtn').on('click', function () {\n    jQuery('#speakerFormContainer').toggle();\n    var isVisible = jQuery('#speakerFormContainer').is(':visible');\n    jQuery('#toggleFormBtn').text(isVisible ? 'Hide Form' : 'Show Form');\n  });\n\n  // Handle form submission\n  jQuery('#speakerForm').on('submit', function (event) {\n    event.preventDefault();\n    console.log(\"Submitting form...\");\n\n    // Clear previous error messages\n    jQuery(\"#errorMessage\").addClass(\"d-none\");\n    jQuery(\"#speakerForm input\").removeClass(\"is-invalid\");\n\n    // Validate required fields\n    var isValid = true;\n    jQuery('#speakerForm input[required]').each(function () {\n      if (!jQuery(this).val()) {\n        isValid = false;\n        jQuery(this).addClass('is-invalid');\n      }\n    });\n    if (!isValid) {\n      jQuery(\"#errorMessage\").removeClass(\"d-none\").text(\"Please fill all required fields.\");\n      return;\n    }\n\n    // Prepare form data\n    var formData = {};\n    jQuery(\"#speakerForm\").serializeArray().forEach(function (item) {\n      formData[item.name] = isNaN(item.value) ? item.value : parseFloat(item.value);\n    });\n\n    // Include additional fields based on the scenario selection\n    var scenario = formData.scenario;\n    if (scenario === \"sealed\" || scenario === \"ported\") {\n      formData.Vb = parseFloat(jQuery(\"#Vb\").val()) || null;\n    }\n    if (scenario === \"ported\") {\n      formData.port_length = parseFloat(jQuery(\"#port_length\").val()) || null;\n      formData.port_diameter = parseFloat(jQuery(\"#port_diameter\").val()) || null;\n    }\n    console.log(\"Form Data:\", formData);\n\n    // Save user inputs to localStorage\n    saveSuggestions(formData);\n\n    // Show loading state\n    jQuery(\"#toggleFormBtn\").prop(\"disabled\", true).text(\"Calculating...\");\n\n    // Send AJAX request\n    var csrfToken = jQuery('meta[name=\"csrf-token\"]').attr('content');\n    jQuery.ajax({\n      url: \"/calculate-speaker-response\",\n      type: \"POST\",\n      data: JSON.stringify(formData),\n      contentType: \"application/json\",\n      headers: {\n        \"X-CSRF-TOKEN\": csrfToken\n      },\n      success: function success(response) {\n        if (response.error) {\n          console.log(\"Server Response:\", response);\n          jQuery(\"#errorMessage\").removeClass(\"d-none\").text(response.error);\n        } else {\n          console.log(\"Server Response:\", response);\n          updateChart(response.frequencies, response.spl, scenario); // Update chart with the selected scenario\n        }\n      },\n      error: function error(xhr) {\n        var errorMessage = \"An error occurred. Please try again.\";\n        if (xhr.responseJSON && xhr.responseJSON.error) {\n          errorMessage = xhr.responseJSON.error;\n        }\n        jQuery(\"#errorMessage\").removeClass(\"d-none\").text(errorMessage);\n      },\n      complete: function complete() {\n        jQuery(\"#toggleFormBtn\").prop(\"disabled\", false).text(\"Hide Form\");\n      }\n    });\n  });\n\n  // Function to update or create the chart\n  function updateChart(frequencies, splData, scenario) {\n    console.log(\"Updating Chart with Data:\", frequencies, splData, scenario);\n\n    // Deep copy the splData to avoid shared references\n    splData = JSON.parse(JSON.stringify(splData));\n\n    // Check if the data is valid\n    if (!Array.isArray(frequencies) || !splData || !splData[scenario]) {\n      console.error(\"Invalid data received for chart update.\");\n      return;\n    }\n    var ctx = document.getElementById(\"responseChart\").getContext(\"2d\");\n\n    // Convert frequencies and SPL into paired data points\n    var dataPoints = frequencies.map(function (f, i) {\n      return {\n        x: f,\n        y: splData[scenario][i]\n      };\n    });\n\n    // If the chart doesn't exist, create it\n    if (!responseChart) {\n      responseChart = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          datasets: []\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: \"logarithmic\",\n              position: \"bottom\",\n              title: {\n                display: true,\n                text: \"Frequency (Hz)\"\n              },\n              min: 20,\n              // Start at 20 Hz\n              max: 20000,\n              // End at 20000 Hz\n              ticks: {\n                callback: function callback(value) {\n                  return Number(value).toFixed(0); // Show values in integer format\n                }\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: \"SPL (dB)\"\n              },\n              ticks: {\n                beginAtZero: false\n              }\n            }\n          },\n          elements: {\n            line: {\n              borderJoinStyle: 'round'\n            }\n          },\n          plugins: {\n            legend: {\n              display: true\n            } // Show legend to differentiate datasets\n          }\n        }\n      });\n    }\n\n    // Check if the dataset for the current scenario already exists\n    var datasetIndex = responseChart.data.datasets.findIndex(function (dataset) {\n      return dataset.label === scenario.replace(\"_\", \" \");\n    });\n    if (datasetIndex === -1) {\n      // Add a new dataset for the scenario\n      responseChart.data.datasets.push({\n        label: scenario.replace(\"_\", \" \"),\n        // Format scenario name\n        data: dataPoints,\n        // Use paired data points\n        borderColor: scenario === \"open_air\" ? \"blue\" : scenario === \"sealed\" ? \"green\" : \"red\",\n        borderWidth: 1,\n        pointRadius: 1,\n        fill: false,\n        tension: 0.4\n      });\n    } else {\n      // Update the existing dataset\n      responseChart.data.datasets[datasetIndex].data = dataPoints;\n    }\n\n    // Update the chart\n    responseChart.update();\n  }\n\n  // Save user inputs to localStorage\n  function saveSuggestions(formData) {\n    var savedSuggestions = JSON.parse(localStorage.getItem(\"speakerFormSuggestions\")) || {};\n    Object.keys(formData).forEach(function (key) {\n      if (!savedSuggestions[key]) {\n        savedSuggestions[key] = [];\n      }\n      if (!savedSuggestions[key].includes(formData[key])) {\n        savedSuggestions[key].push(formData[key]);\n      }\n    });\n    localStorage.setItem(\"speakerFormSuggestions\", JSON.stringify(savedSuggestions));\n  }\n\n  // Restore suggestions from localStorage\n  function restoreSuggestions() {\n    var savedSuggestions = JSON.parse(localStorage.getItem(\"speakerFormSuggestions\")) || {};\n    Object.keys(savedSuggestions).forEach(function (key) {\n      var dataList = jQuery(\"#\".concat(key, \"-suggestions\"));\n      if (dataList.length) {\n        dataList.empty();\n        savedSuggestions[key].forEach(function (value) {\n          dataList.append(\"<option value=\\\"\".concat(value, \"\\\">\"));\n        });\n      }\n    });\n    console.log(\"Restored Suggestions:\", savedSuggestions);\n  }\n\n  // Show or hide extra fields based on scenario\n  jQuery(\"#scenario\").on(\"change\", function () {\n    var scenario = jQuery(this).val();\n    if (scenario === \"sealed\") {\n      jQuery(\"#Vb-container\").show();\n      jQuery(\"#port-length-container, #port-diameter-container\").hide();\n    } else if (scenario === \"ported\") {\n      jQuery(\"#Vb-container, #port-length-container, #port-diameter-container\").show();\n    } else {\n      jQuery(\"#Vb-container, #port-length-container, #port-diameter-container\").hide();\n    }\n  }).trigger(\"change\");\n\n  // Clear all datasets from the chart\n  jQuery('#clearChartBtn').on('click', function () {\n    if (responseChart) {\n      responseChart.data.datasets = []; // Clear all datasets\n      responseChart.update(); // Update the chart\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/frontpage.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/frontpage.js"]();
/******/ 	
/******/ })()
;