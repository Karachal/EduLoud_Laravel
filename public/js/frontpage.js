/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/frontpage.js":
/*!***********************************!*\
  !*** ./resources/js/frontpage.js ***!
  \***********************************/
/***/ (() => {

eval("jQuery(document).ready(function () {\n  var responseChart; // Declare chart globally\n\n  restoreSuggestions();\n\n  // Toggle form visibility\n  jQuery('#toggleFormBtn').on('click', function () {\n    jQuery('#speakerFormContainer').toggle();\n    var isVisible = jQuery('#speakerFormContainer').is(':visible');\n    jQuery('#toggleFormBtn').text(isVisible ? 'Hide Form' : 'Show Form');\n  });\n\n  // Handle form submission\n  jQuery('#speakerForm').on('submit', function (event) {\n    event.preventDefault();\n    console.log(\"Submitting form...\");\n\n    // Clear previous error messages\n    jQuery(\"#errorMessage\").addClass(\"d-none\");\n    jQuery(\"#speakerForm input\").removeClass(\"is-invalid\");\n\n    // Validate required fields\n    var isValid = true;\n    jQuery('#speakerForm input[required]').each(function () {\n      if (!jQuery(this).val()) {\n        isValid = false;\n        jQuery(this).addClass('is-invalid');\n      }\n    });\n    if (!isValid) {\n      jQuery(\"#errorMessage\").removeClass(\"d-none\").text(\"Please fill all required fields.\");\n      return;\n    }\n\n    // Prepare form data\n    var formData = {};\n    jQuery(\"#speakerForm\").serializeArray().forEach(function (item) {\n      formData[item.name] = isNaN(item.value) ? item.value : parseFloat(item.value);\n    });\n\n    // Include additional fields based on the scenario selection\n    var scenario = formData.scenario;\n    if (scenario === \"sealed\" || scenario === \"ported\") {\n      formData.Vb = parseFloat(jQuery(\"#Vb\").val()) || null;\n    }\n    if (scenario === \"ported\") {\n      formData.port_length = parseFloat(jQuery(\"#port_length\").val()) || null;\n      formData.port_diameter = parseFloat(jQuery(\"#port_diameter\").val()) || null;\n    }\n    console.log(\"Form Data:\", formData);\n\n    // Save user inputs to localStorage\n    saveSuggestions(formData);\n\n    // Show loading state\n    jQuery(\"#toggleFormBtn\").prop(\"disabled\", true).text(\"Calculating...\");\n\n    // Send AJAX request\n    var csrfToken = jQuery('meta[name=\"csrf-token\"]').attr('content');\n    jQuery.ajax({\n      url: \"/calculate-speaker-response\",\n      type: \"POST\",\n      data: JSON.stringify(formData),\n      contentType: \"application/json\",\n      headers: {\n        \"X-CSRF-TOKEN\": csrfToken\n      },\n      success: function success(response) {\n        if (response.error) {\n          console.log(\"Server Response:\", response);\n          jQuery(\"#errorMessage\").removeClass(\"d-none\").text(response.error);\n        } else {\n          console.log(\"Server Response:\", response);\n          var scenario = jQuery(\"#scenario\").val(); // Get the selected scenario\n          updateChart(response.frequencies, response.spl, scenario); // Pass scenario to updateChart\n        }\n      },\n      error: function error(xhr) {\n        var errorMessage = \"An error occurred. Please try again.\";\n        if (xhr.responseJSON && xhr.responseJSON.error) {\n          errorMessage = xhr.responseJSON.error;\n        }\n        jQuery(\"#errorMessage\").removeClass(\"d-none\").text(errorMessage);\n      },\n      complete: function complete() {\n        jQuery(\"#toggleFormBtn\").prop(\"disabled\", false).text(\"Hide Form\");\n      }\n    });\n  });\n\n  // Function to update or create the chart\n  function updateChart(frequencies, splData, scenario) {\n    console.log(\"Updating Chart with Data:\", frequencies, splData, scenario);\n\n    // Check if the data is valid\n    if (!Array.isArray(frequencies) || !splData || !splData[scenario]) {\n      console.error(\"Invalid data received for chart update.\");\n      return;\n    }\n    var ctx = document.getElementById(\"responseChart\").getContext(\"2d\");\n\n    // Destroy previous chart if exists\n    if (responseChart) {\n      responseChart.destroy();\n    }\n\n    // Create the chart\n    responseChart = new Chart(ctx, {\n      type: \"line\",\n      data: {\n        labels: frequencies,\n        datasets: [{\n          label: \"SPL Response (\".concat(scenario.replace(\"_\", \" \"), \")\"),\n          // Format scenario name\n          data: splData[scenario],\n          // Use the selected scenario's data\n          borderColor: scenario === \"open_air\" ? \"blue\" : scenario === \"sealed\" ? \"green\" : \"red\",\n          borderWidth: 2,\n          pointRadius: 2,\n          fill: false,\n          tension: 0.4\n        }]\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        scales: {\n          x: {\n            type: \"logarithmic\",\n            position: \"bottom\",\n            title: {\n              display: true,\n              text: \"Frequency (Hz)\"\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: \"SPL (dB)\"\n            },\n            ticks: {\n              beginAtZero: false\n            }\n          }\n        },\n        elements: {\n          line: {\n            borderJoinStyle: 'round'\n          }\n        },\n        plugins: {\n          legend: {\n            display: false\n          }\n        }\n      }\n    });\n  }\n  // Save user inputs to localStorage\n  function saveSuggestions(formData) {\n    var savedSuggestions = JSON.parse(localStorage.getItem(\"speakerFormSuggestions\")) || {};\n    Object.keys(formData).forEach(function (key) {\n      if (!savedSuggestions[key]) {\n        savedSuggestions[key] = [];\n      }\n      if (!savedSuggestions[key].includes(formData[key])) {\n        savedSuggestions[key].push(formData[key]);\n      }\n    });\n    localStorage.setItem(\"speakerFormSuggestions\", JSON.stringify(savedSuggestions));\n  }\n\n  // Restore suggestions from localStorage\n  function restoreSuggestions() {\n    var savedSuggestions = JSON.parse(localStorage.getItem(\"speakerFormSuggestions\")) || {};\n    Object.keys(savedSuggestions).forEach(function (key) {\n      var dataList = jQuery(\"#\".concat(key, \"-suggestions\"));\n      if (dataList.length) {\n        dataList.empty();\n        savedSuggestions[key].forEach(function (value) {\n          dataList.append(\"<option value=\\\"\".concat(value, \"\\\">\"));\n        });\n      }\n    });\n    console.log(\"Restored Suggestions:\", savedSuggestions);\n  }\n\n  // Show or hide extra fields based on scenario\n  jQuery(\"#scenario\").on(\"change\", function () {\n    var scenario = jQuery(this).val();\n    if (scenario === \"sealed\") {\n      jQuery(\"#Vb-container\").show();\n      jQuery(\"#port-length-container, #port-diameter-container\").hide();\n    } else if (scenario === \"ported\") {\n      jQuery(\"#Vb-container, #port-length-container, #port-diameter-container\").show();\n    } else {\n      jQuery(\"#Vb-container, #port-length-container, #port-diameter-container\").hide();\n    }\n  }).trigger(\"change\"); // Ensure correct visibility on page load\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqUXVlcnkiLCJkb2N1bWVudCIsInJlYWR5IiwicmVzcG9uc2VDaGFydCIsInJlc3RvcmVTdWdnZXN0aW9ucyIsIm9uIiwidG9nZ2xlIiwiaXNWaXNpYmxlIiwiaXMiLCJ0ZXh0IiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnNvbGUiLCJsb2ciLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiaXNWYWxpZCIsImVhY2giLCJ2YWwiLCJmb3JtRGF0YSIsInNlcmlhbGl6ZUFycmF5IiwiZm9yRWFjaCIsIml0ZW0iLCJuYW1lIiwiaXNOYU4iLCJ2YWx1ZSIsInBhcnNlRmxvYXQiLCJzY2VuYXJpbyIsIlZiIiwicG9ydF9sZW5ndGgiLCJwb3J0X2RpYW1ldGVyIiwic2F2ZVN1Z2dlc3Rpb25zIiwicHJvcCIsImNzcmZUb2tlbiIsImF0dHIiLCJhamF4IiwidXJsIiwidHlwZSIsImRhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwiY29udGVudFR5cGUiLCJoZWFkZXJzIiwic3VjY2VzcyIsInJlc3BvbnNlIiwiZXJyb3IiLCJ1cGRhdGVDaGFydCIsImZyZXF1ZW5jaWVzIiwic3BsIiwieGhyIiwiZXJyb3JNZXNzYWdlIiwicmVzcG9uc2VKU09OIiwiY29tcGxldGUiLCJzcGxEYXRhIiwiQXJyYXkiLCJpc0FycmF5IiwiY3R4IiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0IiwiZGVzdHJveSIsIkNoYXJ0IiwibGFiZWxzIiwiZGF0YXNldHMiLCJsYWJlbCIsImNvbmNhdCIsInJlcGxhY2UiLCJib3JkZXJDb2xvciIsImJvcmRlcldpZHRoIiwicG9pbnRSYWRpdXMiLCJmaWxsIiwidGVuc2lvbiIsIm9wdGlvbnMiLCJyZXNwb25zaXZlIiwibWFpbnRhaW5Bc3BlY3RSYXRpbyIsInNjYWxlcyIsIngiLCJwb3NpdGlvbiIsInRpdGxlIiwiZGlzcGxheSIsInkiLCJ0aWNrcyIsImJlZ2luQXRaZXJvIiwiZWxlbWVudHMiLCJsaW5lIiwiYm9yZGVySm9pblN0eWxlIiwicGx1Z2lucyIsImxlZ2VuZCIsInNhdmVkU3VnZ2VzdGlvbnMiLCJwYXJzZSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJPYmplY3QiLCJrZXlzIiwia2V5IiwiaW5jbHVkZXMiLCJwdXNoIiwic2V0SXRlbSIsImRhdGFMaXN0IiwibGVuZ3RoIiwiZW1wdHkiLCJhcHBlbmQiLCJzaG93IiwiaGlkZSIsInRyaWdnZXIiXSwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2pzL2Zyb250cGFnZS5qcz81ODk1Il0sInNvdXJjZXNDb250ZW50IjpbImpRdWVyeShkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXNwb25zZUNoYXJ0OyAvLyBEZWNsYXJlIGNoYXJ0IGdsb2JhbGx5XG5cbiAgICByZXN0b3JlU3VnZ2VzdGlvbnMoKTtcblxuICAgIC8vIFRvZ2dsZSBmb3JtIHZpc2liaWxpdHlcbiAgICBqUXVlcnkoJyN0b2dnbGVGb3JtQnRuJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBqUXVlcnkoJyNzcGVha2VyRm9ybUNvbnRhaW5lcicpLnRvZ2dsZSgpO1xuICAgICAgICB2YXIgaXNWaXNpYmxlID0galF1ZXJ5KCcjc3BlYWtlckZvcm1Db250YWluZXInKS5pcygnOnZpc2libGUnKTtcbiAgICAgICAgalF1ZXJ5KCcjdG9nZ2xlRm9ybUJ0bicpLnRleHQoaXNWaXNpYmxlID8gJ0hpZGUgRm9ybScgOiAnU2hvdyBGb3JtJyk7XG4gICAgfSk7XG5cbiAgICAvLyBIYW5kbGUgZm9ybSBzdWJtaXNzaW9uXG4gICAgalF1ZXJ5KCcjc3BlYWtlckZvcm0nKS5vbignc3VibWl0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU3VibWl0dGluZyBmb3JtLi4uXCIpO1xuXG4gICAgICAgIC8vIENsZWFyIHByZXZpb3VzIGVycm9yIG1lc3NhZ2VzXG4gICAgICAgIGpRdWVyeShcIiNlcnJvck1lc3NhZ2VcIikuYWRkQ2xhc3MoXCJkLW5vbmVcIik7XG4gICAgICAgIGpRdWVyeShcIiNzcGVha2VyRm9ybSBpbnB1dFwiKS5yZW1vdmVDbGFzcyhcImlzLWludmFsaWRcIik7XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgICAgIHZhciBpc1ZhbGlkID0gdHJ1ZTtcbiAgICAgICAgalF1ZXJ5KCcjc3BlYWtlckZvcm0gaW5wdXRbcmVxdWlyZWRdJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIWpRdWVyeSh0aGlzKS52YWwoKSkge1xuICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBqUXVlcnkodGhpcykuYWRkQ2xhc3MoJ2lzLWludmFsaWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XG4gICAgICAgICAgICBqUXVlcnkoXCIjZXJyb3JNZXNzYWdlXCIpLnJlbW92ZUNsYXNzKFwiZC1ub25lXCIpLnRleHQoXCJQbGVhc2UgZmlsbCBhbGwgcmVxdWlyZWQgZmllbGRzLlwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByZXBhcmUgZm9ybSBkYXRhXG4gICAgICAgIHZhciBmb3JtRGF0YSA9IHt9O1xuICAgICAgICBqUXVlcnkoXCIjc3BlYWtlckZvcm1cIikuc2VyaWFsaXplQXJyYXkoKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgICAgICBmb3JtRGF0YVtpdGVtLm5hbWVdID0gaXNOYU4oaXRlbS52YWx1ZSkgPyBpdGVtLnZhbHVlIDogcGFyc2VGbG9hdChpdGVtLnZhbHVlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gSW5jbHVkZSBhZGRpdGlvbmFsIGZpZWxkcyBiYXNlZCBvbiB0aGUgc2NlbmFyaW8gc2VsZWN0aW9uXG4gICAgICAgIHZhciBzY2VuYXJpbyA9IGZvcm1EYXRhLnNjZW5hcmlvO1xuICAgICAgICBpZiAoc2NlbmFyaW8gPT09IFwic2VhbGVkXCIgfHwgc2NlbmFyaW8gPT09IFwicG9ydGVkXCIpIHtcbiAgICAgICAgICAgIGZvcm1EYXRhLlZiID0gcGFyc2VGbG9hdChqUXVlcnkoXCIjVmJcIikudmFsKCkpIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNjZW5hcmlvID09PSBcInBvcnRlZFwiKSB7XG4gICAgICAgICAgICBmb3JtRGF0YS5wb3J0X2xlbmd0aCA9IHBhcnNlRmxvYXQoalF1ZXJ5KFwiI3BvcnRfbGVuZ3RoXCIpLnZhbCgpKSB8fCBudWxsO1xuICAgICAgICAgICAgZm9ybURhdGEucG9ydF9kaWFtZXRlciA9IHBhcnNlRmxvYXQoalF1ZXJ5KFwiI3BvcnRfZGlhbWV0ZXJcIikudmFsKCkpIHx8IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zb2xlLmxvZyhcIkZvcm0gRGF0YTpcIiwgZm9ybURhdGEpO1xuXG4gICAgICAgIC8vIFNhdmUgdXNlciBpbnB1dHMgdG8gbG9jYWxTdG9yYWdlXG4gICAgICAgIHNhdmVTdWdnZXN0aW9ucyhmb3JtRGF0YSk7XG5cbiAgICAgICAgLy8gU2hvdyBsb2FkaW5nIHN0YXRlXG4gICAgICAgIGpRdWVyeShcIiN0b2dnbGVGb3JtQnRuXCIpLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKS50ZXh0KFwiQ2FsY3VsYXRpbmcuLi5cIik7XG5cbiAgICAgICAgLy8gU2VuZCBBSkFYIHJlcXVlc3RcbiAgICAgICAgdmFyIGNzcmZUb2tlbiA9IGpRdWVyeSgnbWV0YVtuYW1lPVwiY3NyZi10b2tlblwiXScpLmF0dHIoJ2NvbnRlbnQnKTtcbiAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgdXJsOiBcIi9jYWxjdWxhdGUtc3BlYWtlci1yZXNwb25zZVwiLFxuICAgICAgICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSksXG4gICAgICAgICAgICBjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgICAgICBoZWFkZXJzOiB7IFwiWC1DU1JGLVRPS0VOXCI6IGNzcmZUb2tlbiB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU2VydmVyIFJlc3BvbnNlOlwiLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeShcIiNlcnJvck1lc3NhZ2VcIikucmVtb3ZlQ2xhc3MoXCJkLW5vbmVcIikudGV4dChyZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZXJ2ZXIgUmVzcG9uc2U6XCIsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjZW5hcmlvID0galF1ZXJ5KFwiI3NjZW5hcmlvXCIpLnZhbCgpOyAvLyBHZXQgdGhlIHNlbGVjdGVkIHNjZW5hcmlvXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNoYXJ0KHJlc3BvbnNlLmZyZXF1ZW5jaWVzLCByZXNwb25zZS5zcGwsIHNjZW5hcmlvKTsgLy8gUGFzcyBzY2VuYXJpbyB0byB1cGRhdGVDaGFydFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhocikge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIkFuIGVycm9yIG9jY3VycmVkLiBQbGVhc2UgdHJ5IGFnYWluLlwiO1xuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VKU09OICYmIHhoci5yZXNwb25zZUpTT04uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0geGhyLnJlc3BvbnNlSlNPTi5lcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgalF1ZXJ5KFwiI2Vycm9yTWVzc2FnZVwiKS5yZW1vdmVDbGFzcyhcImQtbm9uZVwiKS50ZXh0KGVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnkoXCIjdG9nZ2xlRm9ybUJ0blwiKS5wcm9wKFwiZGlzYWJsZWRcIiwgZmFsc2UpLnRleHQoXCJIaWRlIEZvcm1cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gRnVuY3Rpb24gdG8gdXBkYXRlIG9yIGNyZWF0ZSB0aGUgY2hhcnRcbiAgICBmdW5jdGlvbiB1cGRhdGVDaGFydChmcmVxdWVuY2llcywgc3BsRGF0YSwgc2NlbmFyaW8pIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJVcGRhdGluZyBDaGFydCB3aXRoIERhdGE6XCIsIGZyZXF1ZW5jaWVzLCBzcGxEYXRhLCBzY2VuYXJpbyk7XG4gICAgXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBkYXRhIGlzIHZhbGlkXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmcmVxdWVuY2llcykgfHwgIXNwbERhdGEgfHwgIXNwbERhdGFbc2NlbmFyaW9dKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiSW52YWxpZCBkYXRhIHJlY2VpdmVkIGZvciBjaGFydCB1cGRhdGUuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHZhciBjdHggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlc3BvbnNlQ2hhcnRcIikuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIFxuICAgICAgICAvLyBEZXN0cm95IHByZXZpb3VzIGNoYXJ0IGlmIGV4aXN0c1xuICAgICAgICBpZiAocmVzcG9uc2VDaGFydCkge1xuICAgICAgICAgICAgcmVzcG9uc2VDaGFydC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjaGFydFxuICAgICAgICByZXNwb25zZUNoYXJ0ID0gbmV3IENoYXJ0KGN0eCwge1xuICAgICAgICAgICAgdHlwZTogXCJsaW5lXCIsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiBmcmVxdWVuY2llcyxcbiAgICAgICAgICAgICAgICBkYXRhc2V0czogW3tcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGBTUEwgUmVzcG9uc2UgKCR7c2NlbmFyaW8ucmVwbGFjZShcIl9cIiwgXCIgXCIpfSlgLCAvLyBGb3JtYXQgc2NlbmFyaW8gbmFtZVxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBzcGxEYXRhW3NjZW5hcmlvXSwgLy8gVXNlIHRoZSBzZWxlY3RlZCBzY2VuYXJpbydzIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IHNjZW5hcmlvID09PSBcIm9wZW5fYWlyXCIgPyBcImJsdWVcIiA6IHNjZW5hcmlvID09PSBcInNlYWxlZFwiID8gXCJncmVlblwiIDogXCJyZWRcIixcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICAgICAgICAgICAgICAgIHBvaW50UmFkaXVzOiAyLFxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgdGVuc2lvbjogMC40XG4gICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBtYWludGFpbkFzcGVjdFJhdGlvOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzY2FsZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgeDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJsb2dhcml0aG1pY1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYm90dG9tXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogeyBkaXNwbGF5OiB0cnVlLCB0ZXh0OiBcIkZyZXF1ZW5jeSAoSHopXCIgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogeyBkaXNwbGF5OiB0cnVlLCB0ZXh0OiBcIlNQTCAoZEIpXCIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2tzOiB7IGJlZ2luQXRaZXJvOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IHsgYm9yZGVySm9pblN0eWxlOiAncm91bmQnIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kOiB7IGRpc3BsYXk6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBTYXZlIHVzZXIgaW5wdXRzIHRvIGxvY2FsU3RvcmFnZVxuICAgIGZ1bmN0aW9uIHNhdmVTdWdnZXN0aW9ucyhmb3JtRGF0YSkge1xuICAgICAgICB2YXIgc2F2ZWRTdWdnZXN0aW9ucyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJzcGVha2VyRm9ybVN1Z2dlc3Rpb25zXCIpKSB8fCB7fTtcbiAgICAgICAgXG4gICAgICAgIE9iamVjdC5rZXlzKGZvcm1EYXRhKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGlmICghc2F2ZWRTdWdnZXN0aW9uc1trZXldKSB7XG4gICAgICAgICAgICAgICAgc2F2ZWRTdWdnZXN0aW9uc1trZXldID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXNhdmVkU3VnZ2VzdGlvbnNba2V5XS5pbmNsdWRlcyhmb3JtRGF0YVtrZXldKSkge1xuICAgICAgICAgICAgICAgIHNhdmVkU3VnZ2VzdGlvbnNba2V5XS5wdXNoKGZvcm1EYXRhW2tleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInNwZWFrZXJGb3JtU3VnZ2VzdGlvbnNcIiwgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTdWdnZXN0aW9ucykpO1xuICAgIH1cblxuICAgIC8vIFJlc3RvcmUgc3VnZ2VzdGlvbnMgZnJvbSBsb2NhbFN0b3JhZ2VcbiAgICBmdW5jdGlvbiByZXN0b3JlU3VnZ2VzdGlvbnMoKSB7XG4gICAgICAgIHZhciBzYXZlZFN1Z2dlc3Rpb25zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInNwZWFrZXJGb3JtU3VnZ2VzdGlvbnNcIikpIHx8IHt9O1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHNhdmVkU3VnZ2VzdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgdmFyIGRhdGFMaXN0ID0galF1ZXJ5KGAjJHtrZXl9LXN1Z2dlc3Rpb25zYCk7XG4gICAgICAgICAgICBpZiAoZGF0YUxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZGF0YUxpc3QuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICBzYXZlZFN1Z2dlc3Rpb25zW2tleV0uZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YUxpc3QuYXBwZW5kKGA8b3B0aW9uIHZhbHVlPVwiJHt2YWx1ZX1cIj5gKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJSZXN0b3JlZCBTdWdnZXN0aW9uczpcIiwgc2F2ZWRTdWdnZXN0aW9ucyk7XG4gICAgfVxuXG4gICAgLy8gU2hvdyBvciBoaWRlIGV4dHJhIGZpZWxkcyBiYXNlZCBvbiBzY2VuYXJpb1xuICAgIGpRdWVyeShcIiNzY2VuYXJpb1wiKS5vbihcImNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzY2VuYXJpbyA9IGpRdWVyeSh0aGlzKS52YWwoKTtcbiAgICAgICAgaWYgKHNjZW5hcmlvID09PSBcInNlYWxlZFwiKSB7XG4gICAgICAgICAgICBqUXVlcnkoXCIjVmItY29udGFpbmVyXCIpLnNob3coKTtcbiAgICAgICAgICAgIGpRdWVyeShcIiNwb3J0LWxlbmd0aC1jb250YWluZXIsICNwb3J0LWRpYW1ldGVyLWNvbnRhaW5lclwiKS5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2NlbmFyaW8gPT09IFwicG9ydGVkXCIpIHtcbiAgICAgICAgICAgIGpRdWVyeShcIiNWYi1jb250YWluZXIsICNwb3J0LWxlbmd0aC1jb250YWluZXIsICNwb3J0LWRpYW1ldGVyLWNvbnRhaW5lclwiKS5zaG93KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBqUXVlcnkoXCIjVmItY29udGFpbmVyLCAjcG9ydC1sZW5ndGgtY29udGFpbmVyLCAjcG9ydC1kaWFtZXRlci1jb250YWluZXJcIikuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfSkudHJpZ2dlcihcImNoYW5nZVwiKTsgLy8gRW5zdXJlIGNvcnJlY3QgdmlzaWJpbGl0eSBvbiBwYWdlIGxvYWRcbn0pOyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDLENBQUNDLEtBQUssQ0FBQyxZQUFZO0VBQy9CLElBQUlDLGFBQWEsQ0FBQyxDQUFDOztFQUVuQkMsa0JBQWtCLENBQUMsQ0FBQzs7RUFFcEI7RUFDQUosTUFBTSxDQUFDLGdCQUFnQixDQUFD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LENBQUMsQ0FBQztNQUNOO0lBQ0osQ0FBQyxDQUFDO0lBRUZiLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLHVCQUF1QixFQUFFMEUsZ0JBQWdCLENBQUM7RUFDMUQ7O0VBRUE7RUFDQXZGLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQ0ssRUFBRSxDQUFDLFFBQVEsRUFBRSxZQUFZO0lBQ3pDLElBQUlzQixRQUFRLEdBQUczQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUNrQixHQUFHLENBQUMsQ0FBQztJQUNqQyxJQUFJUyxRQUFRLEtBQUssUUFBUSxFQUFFO01BQ3ZCM0IsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDcUcsSUFBSSxDQUFDLENBQUM7TUFDOUJyRyxNQUFNLENBQUMsa0RBQWtELENBQUMsQ0FBQ3NHLElBQUksQ0FBQyxDQUFDO0lBQ3JFLENBQUMsTUFBTSxJQUFJM0UsUUFBUSxLQUFLLFFBQVEsRUFBRTtNQUM5QjNCLE1BQU0sQ0FBQyxpRUFBaUUsQ0FBQyxDQUFDcUcsSUFBSSxDQUFDLENBQUM7SUFDcEYsQ0FBQyxNQUFNO01BQ0hyRyxNQUFNLENBQUMsaUVBQWlFLENBQUMsQ0FBQ3NHLElBQUksQ0FBQyxDQUFDO0lBQ3BGO0VBQ0osQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQyIsImlnbm9yZUxpc3QiOltdLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvZnJvbnRwYWdlLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/js/frontpage.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/frontpage.js"]();
/******/ 	
/******/ })()
;