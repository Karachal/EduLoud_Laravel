/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/frontpage.js":
/*!***********************************!*\
  !*** ./resources/js/frontpage.js ***!
  \***********************************/
/***/ (() => {

eval("jQuery(document).ready(function () {\n  var responseChart; // For SPL vs freq(Hz)\n  var impedanceChart; // For Impedance vs (f/fs)\n  var portDiaphragmChart;\n  var speakers = [];\n  restoreSuggestions();\n\n  // Load speaker presets from Laravel's JSON route\n  jQuery.getJSON(\"/speakers\", function (data) {\n    speakers = data;\n    var dropdown = jQuery(\"#speakerPreset\");\n    data.forEach(function (speaker) {\n      dropdown.append(new Option(speaker.name, JSON.stringify(speaker)));\n    });\n  });\n\n  // When the user selects a speaker, populate the form with its values\n  jQuery(\"#speakerPreset\").on(\"change\", function () {\n    var selectedSpeaker = JSON.parse(jQuery(this).val() || \"{}\");\n    if (!selectedSpeaker.name) return;\n\n    // Fill the form fields with the selected speaker data\n    jQuery(\"#re\").val(selectedSpeaker.re);\n    jQuery(\"#le\").val(selectedSpeaker.le);\n    jQuery(\"#qes\").val(selectedSpeaker.qes);\n    jQuery(\"#qms\").val(selectedSpeaker.qms);\n    jQuery(\"#fs\").val(selectedSpeaker.fs);\n    jQuery(\"#vas\").val(selectedSpeaker.vas);\n    jQuery(\"#cms\").val(selectedSpeaker.cms);\n    jQuery(\"#mms\").val(selectedSpeaker.mms);\n    jQuery(\"#rms\").val(selectedSpeaker.rms);\n    jQuery(\"#bl\").val(selectedSpeaker.bl);\n    jQuery(\"#sd\").val(selectedSpeaker.sd);\n    jQuery(\"#z\").val(selectedSpeaker.z);\n\n    //Trigger Qts Calculation\n    calculatePhysicalParameters();\n  });\n  // Toggle form visibility\n  jQuery('#toggleFormBtn').on('click', function () {\n    jQuery('#speakerFormContainer').toggle();\n    var isVisible = jQuery('#speakerFormContainer').is(':visible');\n    jQuery('#toggleFormBtn').text(isVisible ? 'Hide Form' : 'Show Form');\n  });\n\n  // Function to clear all form fields\n  jQuery(\"#clearFormBtn\").on(\"click\", function () {\n    jQuery(\"#speakerForm\")[0].reset(); // Reset all fields to default\n\n    // Also clear manually filled calculated fields\n    jQuery(\"#qts\").val(\"\");\n    jQuery(\"#cms\").val(\"\");\n    jQuery(\"#mms\").val(\"\");\n    jQuery(\"#rms\").val(\"\");\n    jQuery(\"#bl\").val(\"\");\n    // Reset Type of Analysis dropdown\n    jQuery(\"#scenario\").val(\"open_air\").trigger(\"change\"); // Ensures the dropdown resets and triggers onchange event\n\n    // Hide additional fields (Sealed & Ported box parameters)\n    jQuery(\"#boxParams\").hide();\n    jQuery(\"#portedParams\").hide();\n  });\n  jQuery('#speakerForm').on('submit', function (event) {\n    event.preventDefault();\n    console.log(\"Submitting form...\");\n\n    // Clear previous error messages\n    jQuery(\"#errorMessage\").addClass(\"d-none\");\n    jQuery(\"#speakerForm input\").removeClass(\"is-invalid\");\n\n    // Validate required fields\n    var isValid = true;\n    jQuery('#speakerForm input[required]').each(function () {\n      if (!jQuery(this).val()) {\n        isValid = false;\n        jQuery(this).addClass('is-invalid');\n      }\n    });\n    if (!isValid) {\n      jQuery(\"#errorMessage\").removeClass(\"d-none\").text(\"Please fill all required fields.\");\n      return;\n    }\n\n    // Prepare form data\n    var formData = {};\n    jQuery(\"#speakerForm\").serializeArray().forEach(function (item) {\n      formData[item.name] = isNaN(item.value) ? item.value : parseFloat(item.value);\n    });\n\n    // Include calculated fields in form data\n    jQuery(\"#qts, #cms, #mms, #rms, #bl, #le, #z\").each(function () {\n      formData[this.id] = parseFloat(jQuery(this).val()) || null;\n    });\n\n    // Additional fields\n    var scenario = formData.scenario;\n    if (scenario === \"sealed\" || scenario === \"ported\") {\n      formData.lx = parseFloat(jQuery(\"#lx\").val()) || null;\n      formData.ly = parseFloat(jQuery(\"#ly\").val()) || null;\n      formData.lz = parseFloat(jQuery(\"#lz\").val()) || null;\n    }\n    if (scenario === \"ported\") {\n      formData.port_length = parseFloat(jQuery(\"#port_length\").val()) || null;\n      formData.port_section_aeria = parseFloat(jQuery(\"#port_section_aeria\").val()) || null;\n      formData.port_diagram_response = jQuery(\"#port_diagram_response\").is(\":checked\");\n    }\n    console.log(\"Form Data:\", formData);\n\n    // Save suggestions\n    saveSuggestions(formData);\n\n    // Show loading state\n    jQuery(\"#toggleFormBtn\").prop(\"disabled\", true).text(\"Calculating...\");\n\n    // AJAX\n    var csrfToken = jQuery('meta[name=\"csrf-token\"]').attr('content');\n    jQuery.ajax({\n      url: \"/calculate-speaker-response\",\n      type: \"POST\",\n      data: JSON.stringify(formData),\n      contentType: \"application/json\",\n      headers: {\n        \"X-CSRF-TOKEN\": csrfToken\n      },\n      success: function success(response) {\n        if (response.error) {\n          console.log(\"Server Response:\", response);\n          jQuery(\"#errorMessage\").removeClass(\"d-none\").text(response.error);\n        } else {\n          console.log(\"Server Response:\", response);\n\n          // Update SPL chart\n          updateChart(response.frequencies, response.spl, scenario);\n\n          // If impedance data is present, update the Impedance chart\n          if (response.impedance && response.frequencies) {\n            updateImpedanceChart(response, scenario);\n          } else {\n            console.error(\"Missing impedance or frequency data in response.\");\n          }\n\n          // Update Port & Diaphragm Chart ONLY IF \"ported\" and checkbox enabled\n          if (scenario === \"ported\" && formData.port_diagram_response) {\n            if (response.spl_port && response.spl_diaphragm) {\n              updatePortDiaphragmChart(response.frequencies, response, scenario);\n            } else {\n              console.error(\"Missing port/diaphragm response data.\");\n            }\n          }\n        }\n      },\n      error: function error(xhr) {\n        var errorMessage = \"An error occurred. Please try again.\";\n        if (xhr.responseJSON && xhr.responseJSON.error) {\n          errorMessage = xhr.responseJSON.error;\n        }\n        jQuery(\"#errorMessage\").removeClass(\"d-none\").text(errorMessage);\n      },\n      complete: function complete() {\n        jQuery(\"#toggleFormBtn\").prop(\"disabled\", false).text(\"Hide Form\");\n      }\n    });\n  });\n\n  // SPL vs frequency(Hz)\n  function updateChart(frequencies, splData, scenario) {\n    console.log(\"Updating SPL Chart:\", scenario);\n    if (!Array.isArray(frequencies) || !splData || !splData[scenario]) {\n      console.error(\"Invalid data for SPL chart update.\");\n      return;\n    }\n    var ctx = document.getElementById(\"responseChart\").getContext(\"2d\");\n    var dataPoints = frequencies.map(function (f, i) {\n      return {\n        x: f,\n        y: splData[scenario][i]\n      };\n    });\n    if (!responseChart) {\n      responseChart = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          datasets: []\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: \"logarithmic\",\n              position: \"bottom\",\n              title: {\n                display: true,\n                text: \"Frequency (Hz)\"\n              },\n              min: 20,\n              max: 20000,\n              ticks: {\n                autoSkip: true,\n                // Automatically skips overlapping ticks\n                maxTicksLimit: 20,\n                // Limits the number of ticks to 10\n                callback: function callback(value) {\n                  return Number(value).toFixed(0);\n                }\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: \"SPL (dB)\"\n              },\n              min: 60,\n              ticks: {\n                beginAtZero: false\n              }\n            }\n          },\n          elements: {\n            line: {\n              borderJoinStyle: 'round'\n            }\n          },\n          plugins: {\n            legend: {\n              display: true\n            }\n          }\n        }\n      });\n    }\n    var labelName = scenario.replace(\"_\", \" \");\n    var dsIndex = responseChart.data.datasets.findIndex(function (ds) {\n      return ds.label === labelName;\n    });\n    if (dsIndex === -1) {\n      responseChart.data.datasets.push({\n        label: labelName,\n        data: dataPoints,\n        borderColor: scenario === \"open_air\" ? \"blue\" : scenario === \"sealed\" ? \"green\" : \"red\",\n        borderWidth: 0.5,\n        pointRadius: 0.5,\n        fill: false,\n        tension: 0.4\n      });\n    } else {\n      responseChart.data.datasets[dsIndex].data = dataPoints;\n    }\n    responseChart.update();\n  }\n  // IMPEDANCE vs frequency(Hz)\n  function updateImpedanceChart(response, scenario) {\n    console.log(\"Updating Impedance Chart:\", scenario);\n\n    // Extract frequency (Hz) and impedance data\n    var frequencies = response.frequencies;\n    var impData = response.impedance; // { scenario: [Z array] }\n\n    // Validate data\n    if (!Array.isArray(frequencies) || !impData || !impData[scenario]) {\n      console.error(\"Invalid data for Impedance chart update.\");\n      return;\n    }\n\n    // Create data points for the chart (No normalization needed)\n    var dataPoints = frequencies.map(function (freq, i) {\n      return {\n        x: freq,\n        y: impData[scenario][i]\n      };\n    });\n\n    // Get chart context\n    var ctx = document.getElementById(\"impedanceChart\").getContext(\"2d\");\n\n    // Initialize the chart if it doesn't exist\n    if (!impedanceChart) {\n      impedanceChart = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          datasets: []\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: \"logarithmic\",\n              position: \"bottom\",\n              title: {\n                display: true,\n                text: \"Frequency (Hz)\"\n              },\n              min: 20,\n              max: 20000,\n              ticks: {\n                autoSkip: true,\n                // Automatically skips overlapping ticks\n                maxTicksLimit: 20,\n                // Limits the number of ticks to 20\n                callback: function callback(value) {\n                  return Number(value).toFixed(0);\n                }\n              }\n            },\n            y: {\n              type: \"linear\",\n              title: {\n                display: true,\n                text: \"Impedance (Ω)\"\n              },\n              // UPDATED Y-AXIS LABEL\n              ticks: {\n                beginAtZero: false\n              }\n            }\n          },\n          elements: {\n            line: {\n              borderJoinStyle: 'round'\n            }\n          },\n          plugins: {\n            legend: {\n              display: true\n            }\n          }\n        }\n      });\n    }\n\n    // Update or add the dataset for the current scenario\n    var labelName = scenario.replace(\"_\", \" \");\n    var dsIndex = impedanceChart.data.datasets.findIndex(function (ds) {\n      return ds.label === labelName;\n    });\n    if (dsIndex === -1) {\n      impedanceChart.data.datasets.push({\n        label: labelName,\n        data: dataPoints,\n        borderColor: scenario === \"open_air\" ? \"orange\" : scenario === \"sealed\" ? \"purple\" : scenario === \"ported\" ? \"green\" : \"brown\",\n        borderWidth: 0.5,\n        pointRadius: 0.5,\n        fill: false,\n        tension: 0.4\n      });\n    } else {\n      impedanceChart.data.datasets[dsIndex].data = dataPoints;\n    }\n\n    // Update the chart\n    impedanceChart.update();\n  }\n\n  // Function to update the new Port & Diaphragm SPL chart\n  function updatePortDiaphragmChart(frequencies, response, scenario) {\n    console.log(\"Updating Port & Diaphragm Response Chart:\", scenario);\n\n    // Check if the response contains the required data\n    if (!Array.isArray(frequencies) || !response.spl_port || !response.spl_diaphragm) {\n      console.error(\"Invalid data for Port & Diaphragm chart update.\");\n      return;\n    }\n    var ctx = document.getElementById(\"portDiaphragmChart\").getContext(\"2d\");\n    if (!portDiaphragmChart) {\n      portDiaphragmChart = new Chart(ctx, {\n        type: \"line\",\n        data: {\n          datasets: []\n        },\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            x: {\n              type: \"logarithmic\",\n              position: \"bottom\",\n              title: {\n                display: true,\n                text: \"Frequency (Hz)\"\n              },\n              min: 20,\n              max: 20000,\n              ticks: {\n                autoSkip: true,\n                maxTicksLimit: 20,\n                callback: function callback(value) {\n                  return Number(value).toFixed(0);\n                }\n              }\n            },\n            y: {\n              title: {\n                display: true,\n                text: \"SPL (dB)\"\n              },\n              min: 40,\n              ticks: {\n                beginAtZero: false\n              }\n            }\n          },\n          elements: {\n            line: {\n              borderJoinStyle: 'round'\n            }\n          },\n          plugins: {\n            legend: {\n              display: true\n            }\n          }\n        }\n      });\n    }\n\n    // Define datasets for SPL_port and SPL_diaphragm\n    var datasetsToAdd = [];\n    if (response.spl_port[scenario]) {\n      datasetsToAdd.push({\n        label: scenario.replace(\"_\", \" \") + \" SPL (Port)\",\n        data: frequencies.map(function (f, i) {\n          return {\n            x: f,\n            y: response.spl_port[scenario][i]\n          };\n        }),\n        borderColor: \"blue\",\n        borderWidth: 1,\n        pointRadius: 0.5,\n        fill: false,\n        tension: 0.4\n      });\n    }\n    if (response.spl_diaphragm[scenario]) {\n      datasetsToAdd.push({\n        label: scenario.replace(\"_\", \" \") + \" SPL (Diaphragm)\",\n        data: frequencies.map(function (f, i) {\n          return {\n            x: f,\n            y: response.spl_diaphragm[scenario][i]\n          };\n        }),\n        borderColor: \"green\",\n        borderWidth: 1,\n        pointRadius: 0.5,\n        fill: false,\n        tension: 0.4\n      });\n    }\n\n    // Replace datasets and update the chart\n    portDiaphragmChart.data.datasets = datasetsToAdd;\n    portDiaphragmChart.update();\n  }\n\n  // Track overridden fields\n  var overriddenFields = {};\n\n  // Function to round a number to 3 significant figures\n  function roundToSignificantFigures(num) {\n    var sigFigs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n    if (num === 0) return 0; // Avoid log issues with zero\n    var scale = Math.pow(10, sigFigs - Math.floor(Math.log10(Math.abs(num))) - 1);\n    return Math.round(num * scale) / scale;\n  }\n\n  // Function to calculate Fb (Tuning Frequency)\n  function calculateFb() {\n    console.log(\"calculateFb function triggered!\"); // Debugging message\n\n    // Read and convert input values\n    var lx = parseFloat(jQuery(\"#lx\").val()) * 0.01; // Convert cm to m\n    var ly = parseFloat(jQuery(\"#ly\").val()) * 0.01;\n    var lz = parseFloat(jQuery(\"#lz\").val()) * 0.01;\n    var portLength = parseFloat(jQuery(\"#port_length\").val()) * 0.01; // Convert cm to m\n    var portSection = parseFloat(jQuery(\"#port_section_aeria\").val()) * 0.0001; // Convert cm² to m²\n\n    console.log(\"Raw input values - lx:\", lx, \"ly:\", ly, \"lz:\", lz, \"portLength:\", portLength, \"portSection:\", portSection);\n\n    // Check for missing values\n    if (isNaN(lx) || isNaN(ly) || isNaN(lz) || isNaN(portLength) || isNaN(portSection)) {\n      console.log(\"Missing values, fb calculation skipped.\");\n      jQuery(\"#fb\").val(\"\");\n      return;\n    }\n\n    // Box volume (Vb) in cubic meters\n    var Vb = lx * ly * lz;\n\n    //  Directly calculate Sp, Vp, and Vab inside this function\n    var Sp = portSection; // Port section area in m² (already converted)\n    var Vp = Sp * portLength; // Port volume in m³\n    var Vab = Vb - Vp; // Effective box volume in m³\n\n    console.log(\"Port Section Area (Sp) in m²:\", Sp);\n    console.log(\"Port Volume (Vp) in m³:\", Vp);\n    console.log(\"Effective Box Volume (Vab) in m³:\", Vab);\n\n    // Ensure values are valid\n    if (Vab <= 0 || Vp <= 0) {\n      console.log(\"Error: Vab or Vp is invalid. Fb calculation stopped.\");\n      jQuery(\"#fb\").val(\"\");\n      return;\n    }\n\n    //  Correct Fb formula (NO ROUNDING)\n    var fb = 344.8 / (2 * Math.PI * portLength) * Math.sqrt(Vp / Vab);\n    console.log(\"Raw Fb:\", fb); //  Debugging message\n\n    //  Update the fb field with the raw value\n    jQuery(\"#fb\").val(roundToSignificantFigures(fb, 3));\n    ;\n  }\n\n  // Ensure Fb is calculated when inputs change\n  jQuery(document).ready(function () {\n    console.log(\"Page loaded - running calculateFb() once\");\n    calculateFb(); // Run once on page load\n  });\n\n  // Trigger recalculation when inputs change\n  jQuery(\"#port_length, #port_section_aeria, #lx, #ly, #lz\").off(\"input\").on(\"input\", calculateFb);\n\n  // Function to calculate Physical Parameters with correct unit conversions\n  function calculatePhysicalParameters() {\n    // Constants\n    var SOUND_CELERITY = 344.8; // Speed of sound in air (m/s)\n    var AIR_DENSITY = 1.18; // Air density (kg/m³)\n    var PI = Math.PI;\n\n    // Get input values from form\n    var Re = parseFloat(jQuery(\"#re\").val());\n    var Qes = parseFloat(jQuery(\"#qes\").val());\n    var Qms = parseFloat(jQuery(\"#qms\").val());\n    var fs = parseFloat(jQuery(\"#fs\").val());\n    var Sd = parseFloat(jQuery(\"#sd\").val()) / 10000; // Convert cm² to m²\n    var Vas = parseFloat(jQuery(\"#vas\").val()) / 1000; // Convert L to m³\n\n    // Check if all required values are present\n    if (isNaN(Re) || isNaN(Qes) || isNaN(Qms) || isNaN(fs) || isNaN(Sd) || isNaN(Vas)) {\n      console.log(\"Waiting for all Thiele-Small parameters to be entered...\");\n      return;\n    }\n\n    // Calculate Total Q Factor\n    var Qts = Qes * Qms / (Qes + Qms);\n\n    // Calculate Cms (Compliance of Suspension)\n    var Cms = Vas / (Math.pow(Sd, 2) * AIR_DENSITY * Math.pow(SOUND_CELERITY, 2));\n\n    // Calculate Mms (Moving Mass)\n    var Mms = 1 / (Math.pow(2 * PI * fs, 2) * Cms);\n\n    // Calculate Rms (Mechanical Resistance)\n    var Rms = 1 / Qms * Math.sqrt(Mms / Cms);\n\n    // Calculate BL (Force Factor)\n    var BL = Math.sqrt(Re / (2 * PI * fs * Qes * Cms));\n    Cms = Cms * 1000000; // convert from m/N to μm/N\n    Mms = Mms * 1000; //convert from kg to g\n\n    // Update form fields with calculated values (only if not overridden by the user)\n    if (!overriddenFields.qts) jQuery(\"#qts\").val(roundToSignificantFigures(Qts, 3));\n    if (!overriddenFields.cms) jQuery(\"#cms\").val(roundToSignificantFigures(Cms, 3));\n    if (!overriddenFields.mms) jQuery(\"#mms\").val(roundToSignificantFigures(Mms, 3));\n    if (!overriddenFields.rms) jQuery(\"#rms\").val(roundToSignificantFigures(Rms, 3));\n    if (!overriddenFields.bl) jQuery(\"#bl\").val(roundToSignificantFigures(BL, 3));\n  }\n\n  // Attach event listeners to Thiele-Small parameters to trigger recalculation\n  jQuery(\"#re, #qes, #qms, #fs, #sd, #vas\").on(\"input\", calculatePhysicalParameters);\n\n  // Listen for user input on calculated fields to mark them as overridden\n  //DELETED #le\n  jQuery(\"#qts, #cms, #mms, #rms, #bl\").on(\"input\", function () {\n    overriddenFields[this.id] = true;\n  });\n  function saveSuggestions(formData) {\n    var savedSuggestions = JSON.parse(localStorage.getItem(\"speakerFormSuggestions\")) || {};\n    Object.keys(formData).forEach(function (key) {\n      if (!savedSuggestions[key]) {\n        savedSuggestions[key] = [];\n      }\n      if (!savedSuggestions[key].includes(formData[key])) {\n        savedSuggestions[key].push(formData[key]);\n      }\n    });\n    localStorage.setItem(\"speakerFormSuggestions\", JSON.stringify(savedSuggestions));\n  }\n  function restoreSuggestions() {\n    var savedSuggestions = JSON.parse(localStorage.getItem(\"speakerFormSuggestions\")) || {};\n    Object.keys(savedSuggestions).forEach(function (key) {\n      var dataList = jQuery(\"#\".concat(key, \"-suggestions\"));\n      if (dataList.length) {\n        dataList.empty();\n        savedSuggestions[key].forEach(function (value) {\n          dataList.append(\"<option value=\\\"\".concat(value, \"\\\">\"));\n        });\n      }\n    });\n    console.log(\"Restored Suggestions:\", savedSuggestions);\n  }\n\n  // scenario onChange\n  jQuery(\"#scenario\").on(\"change\", function () {\n    var scenario = jQuery(this).val();\n    if (scenario === \"sealed\") {\n      jQuery(\"#Vb-container\").show();\n      jQuery(\"#port-length-container, #port-diameter-container\").hide();\n    } else if (scenario === \"ported\") {\n      jQuery(\"#Vb-container, #port-length-container, #port-diameter-container\").show();\n    } else {\n      jQuery(\"#Vb-container, #port-length-container, #port-diameter-container\").hide();\n    }\n  }).trigger(\"change\");\n\n  // Clear both charts\n  jQuery('#clearChartBtn').on('click', function () {\n    if (responseChart) {\n      responseChart.data.datasets = [];\n      responseChart.update();\n    }\n    if (impedanceChart) {\n      impedanceChart.data.datasets = [];\n      impedanceChart.update();\n    }\n    if (portDiaphragmChart) {\n      portDiaphragmChart.data.datasets = [];\n      portDiaphragmChart.update();\n    }\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/frontpage.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/frontpage.js"]();
/******/ 	
/******/ })()
;